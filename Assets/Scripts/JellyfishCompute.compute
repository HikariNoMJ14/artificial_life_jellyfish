#pragma kernel CSMain
static const int threadGroupSize = 1024;

struct Jelly {
    float3 position;
    float3 direction;
    float glowOffset;
    float hue;

    int numFlockmates;
    float3 flockCentre;
    float3 flockDirection;
    float3 separationDirection;
    float glowStimulus;
    float hueStimulus;
};

RWStructuredBuffer<Jelly> jellys;
int numJelly;
float neighborhoodRadius;
float separationRadius;
float alignmentRadius;
float cohesionRadius;


[numthreads(threadGroupSize,1,1)]
void CSMain (int id : SV_DispatchThreadID)
{
    for (int indexB = 0; indexB < numJelly; indexB ++) {
        if (id.x != indexB) {
            Jelly jellyB = jellys[indexB];
            float3 offset = jellyB.position - jellys[id.x].position;
            float sqrDist = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

            if (sqrDist < neighborhoodRadius * neighborhoodRadius) {

                if (sqrDist < alignmentRadius * alignmentRadius) {
                    jellys[id.x].flockDirection += jellyB.direction;

                    if (sqrDist < cohesionRadius * cohesionRadius) {
                        jellys[id.x].numFlockmates += 1;
                        jellys[id.x].flockCentre += jellyB.position;

                        jellys[id.x].glowStimulus += jellyB.glowOffset;
                        jellys[id.x].hueStimulus += jellyB.hue;

                        if (sqrDist < separationRadius * separationRadius) {
                            jellys[id.x].separationDirection -= offset / sqrDist;
                        }
                    }
                }
            }
        }
    }
}